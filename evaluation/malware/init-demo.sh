#!/bin/sh

set -e

package="$1"
version="$2"

if [ "$package" = '' ] || [ "$version" != '' ]; then
	echo 'usage: ./init-demo.sh <package name> <version>'
	exit 2
fi

## Create directory for the demo
cp -r './.template' "./$package-$version"
cd "./$package-$version"

## Fill the name and version out in the template
sed -i "s|__package_name__|$package|g" './index.js'
sed -i "s|__package_name__|$package|g" './package.json'
sed -i "s|__package_name__|$package|g" './README.md'
sed -i "s|__package_version__|$version|g" './package.json'
sed -i "s|__package_version__|$version|g" './README.md'

## Install the dependencies, create the SBOM, clean up
npm install --ignore-scripts "$package"

rm -rf "./node_modules/$package"

tarball="../.tarballs/$(echo "$package" | sed 's|/|-|g')-$version.tgz"
tar -xzf "$tarball" -C "./node_modules"

if [ -d './node_modules/package' ]; then
	manifest=$(cat './node_modules/package/package.json')
else
	manifest=$(cat "./node_modules/$package/package.json")
fi
deps=$(echo "$manifest" | jq -r '.dependencies | to_entries | map("\(.key)@\(.value)") | join(" ")') || true
npm install --ignore-scripts $deps  # intentional argument splitting!

npm sbom --sbom-format 'cyclonedx' >./sbom.json
sed -i "s|0.0.1-security|$version|g" './sbom.json'
rm -rf './node_modules'

## Initialize the CBOM
touch cbom.json
